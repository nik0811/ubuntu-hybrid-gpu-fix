#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

if [ "$EUID" -ne 0 ]; then
  echo "Please run as root: sudo $0"
  exit 1
fi

TIMESTAMP="$(date +%Y%m%d-%H%M%S)"
BACKUP_DIR="/root/hybrid-gpu-backup-$TIMESTAMP"
mkdir -p "$BACKUP_DIR"

echo "🧰 Backup directory: $BACKUP_DIR"

# Backup relevant config directories
for d in /etc/X11/xorg.conf.d /etc/modprobe.d /etc/modules-load.d; do
  if [ -d "$d" ]; then
    echo "Backing up $d → $BACKUP_DIR/$(basename "$d")"
    cp -a "$d" "$BACKUP_DIR/" || true
  fi
done

# Detect GPUs safely (only VGA/3D)
NV_PCI_RAW="$(lspci | grep -E 'VGA|3D' | grep -i 'NVIDIA' | head -n1 | awk '{print $1}' || true)"
AMD_PCI_RAW="$(lspci | grep -E 'VGA|3D' | grep -i 'AMD' | head -n1 | awk '{print $1}' || true)"

if [ -z "$NV_PCI_RAW" ] || [ -z "$AMD_PCI_RAW" ]; then
  echo "❌ Could not detect both GPUs automatically."
  echo "Detected NVIDIA: '$NV_PCI_RAW'"
  echo "Detected AMD:    '$AMD_PCI_RAW'"
  echo "Please check with: lspci | grep -E 'VGA|3D'"
  exit 1
fi

# Convert PCI IDs for Xorg (replace dot with colon)
pci_to_busid() {
  local raw="$1"
  echo "PCI:${raw/./:}"
}

NV_BUSID="$(pci_to_busid "$NV_PCI_RAW")"
AMD_BUSID="$(pci_to_busid "$AMD_PCI_RAW")"

echo "✅ Detected NVIDIA GPU: $NV_PCI_RAW → BusID $NV_BUSID"
echo "✅ Detected AMD GPU:    $AMD_PCI_RAW → BusID $AMD_BUSID"

# Backup any modprobe files that mention nvidia
for f in $(grep -lR -i "nvidia" /etc/modprobe.d 2>/dev/null || true); do
  echo "Moving $f → $BACKUP_DIR/$(basename "$f")"
  mv "$f" "$BACKUP_DIR/$(basename "$f")"
done

# Enable NVIDIA DRM modeset for PRIME
echo "📝 Writing /etc/modprobe.d/nvidia.conf"
cat > /etc/modprobe.d/nvidia.conf <<'EOF'
options nvidia_drm modeset=1
EOF

# Ensure correct load order
echo "📝 Writing /etc/modules-load.d/gpu.conf"
cat > /etc/modules-load.d/gpu.conf <<'EOF'
amdgpu
nvidia
nvidia_uvm
nvidia_modeset
nvidia_drm
EOF

# Create hybrid GPU Xorg config
XCONF="/etc/X11/xorg.conf.d/10-hybrid.conf"
mkdir -p /etc/X11/xorg.conf.d
echo "📝 Writing $XCONF"
cat > "$XCONF" <<EOF
# Hybrid AMD (display) + NVIDIA (offload) configuration
# Generated by fix-hybrid-gpu.sh at $TIMESTAMP

Section "ServerLayout"
    Identifier "layout"
    Screen 0 "amd"
EndSection

Section "Device"
    Identifier "AMDgpu"
    Driver "amdgpu"
    BusID "$AMD_BUSID"
    Option "DRI" "3"
    Option "TearFree" "true"
    Option "VariableRefresh" "true"
    Option "PrimaryGPU" "yes"
EndSection

Section "Device"
    Identifier "NVIDIA"
    Driver "nvidia"
    BusID "$NV_BUSID"
    Option "AllowEmptyInitialConfiguration"
    Option "AllowExternalGpus" "True"
    Option "Coolbits" "28"
EndSection
EOF

# Update initramfs & grub
echo "⚙️ Updating initramfs and grub..."
update-initramfs -u -k all
update-grub || true

echo
echo "✅ Done! Backups saved at: $BACKUP_DIR"
echo
echo "👉 Next steps:"
echo "  1. Reboot: sudo reboot"
echo "  2. After reboot, verify:"
echo "       lsmod | egrep 'amdgpu|nvidia'"
echo "       nvidia-smi"
echo "       glxinfo | grep 'OpenGL renderer'"
echo "       __NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia glxinfo | grep 'OpenGL renderer'"
echo
echo "✅ Expected:"
echo "  - Default renderer → AMD Radeon Graphics"
echo "  - Offload renderer → NVIDIA GPU"
echo "  - nvidia-smi shows your RTX card"
echo
exit 0
